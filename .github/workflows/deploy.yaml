name: 'Terraform Plan/Apply'

on:
  workflow_dispatch:
    inputs:
      tf_apply:
        description: 'Run Terraform apply?'
        required: false
        type: string
        default: "true"
  push:
    branches:
      - main
      - dev

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  UAMI_ID: ${{ vars.UAMI_ID }}
  ARM_SUBSCRIPTION_ID: "${{ vars.SUB_ID }}"
  ARM_TENANT_ID: "${{ vars.TENANT_ID }}"

jobs:

#   build-image:
#     environment: main
#     name: Image Build
#     runs-on: ubuntu-latest
#     steps:
#       # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Login to Azure using Federated Credentials
#         uses: azure/login@v2
#         with:
#           client-id: ${{ vars.UAMI_ID }}
#           tenant-id: ${{ vars.TENANT_ID }}
#           subscription-id: ${{ vars.SUB_ID }}

#       - name: Get ACR access token
#         id: acrtoken
#         run: |
#           TOKEN=$(az acr login --name ${{ vars.ACR_NAME }} --expose-token --query accessToken -o tsv)
#           echo "token=$TOKEN" >> $GITHUB_OUTPUT

#       - name: Docker login to ACR
#         uses: docker/login-action@v3
#         with:
#           registry: "${{ vars.ACR_NAME }}.azurecr.io"
#           username: 00000000-0000-0000-0000-000000000000
#           password: ${{ steps.acrtoken.outputs.token }}

#       - name: bank_pull app - build docker image
#         working-directory: src
#         run: |
#           docker build  -t ${{ vars.ACR_NAME }}.azurecr.io/bank_pull:main .

#       - name: bank_pull app - push to ACR
#         run: |
#           docker push ${{ vars.ACR_NAME }}.azurecr.io/bank_pull:main

  infra-deploy:
    environment: main
    # needs: build-images
    name: 'Az Infra Deploy'
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.UAMI_ID }}
          tenant-id: ${{ vars.TENANT_ID }}
          subscription-id: ${{ vars.SUB_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Create runtime tfbackend.conf
        working-directory: terraform
        run: |
            cat > tfbackend.conf <<EOF
            resource_group_name  = ${{ vars.RG_NAME }}
            storage_account_name = ${{ vars.STORAGE_ACCOUNT_NAME }}
            container_name       = ${{ vars.CONTAINER_NAME }}
            key                  = "terraform.tfstate"
            EOF
        
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config=tfbackend.conf 

      - name: Terraform Format
        working-directory: terraform
        run: terraform fmt -check

      # Terraform Plan
      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
          -var 'acr_name=${{ vars.ACR_NAME }}' \
          -var 'rg_name=${{ vars.RG_NAME }}' \ 
          -var 'project_name_no_dash=${{ vars.PROJECT_NAME_NODASH }}'
    
      # Terraform Apply
      - name: Terraform Apply
        # if: ${{ inputs.tf_apply == 'true' }}
        working-directory: terraform
        run: | 
          terraform apply -auto-approve  \
          -var 'acr_name=${{ vars.ACR_NAME }}' \
          -var 'rg_name=${{ vars.RG_NAME }}' \ 
          -var 'project_name_no_dash=${{ vars.PROJECT_NAME_NODASH }}'
